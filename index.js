process.env["NTBA_FIX_350"] = 1;
require("dotenv").config();
const fs = require("node:fs");
const crypto = require("node:crypto");
const { ChartJSNodeCanvas } = require('chartjs-node-canvas');
const { Image, registerFont } = require("canvas");
const TelegramBot = require('node-telegram-bot-api');
const cheerio = require("cheerio");

registerFont("./assets/Montserrat-Bold.ttf", { family: "Montserrat" });
const logoImage = new Image()
logoImage.src = "./assets/kryptexLogo.png";

const dataUpdateInterval = 15 * 60_000;

class Database extends Map {
	constructor() {
		super();

		try {
			JSON.parse(fs.readFileSync("./database.json", "utf-8")).forEach((data) => this.set(data.userId, data));
		} catch { }
	}

	set(key, value) {
		const exist = this.get(key);
		if (exist) Object.assign(exist, value);
		else super.set(key, { userId: key, ...value })

		this.save();
	}

	delete(key) {
		super.delete(key);
		this.save();
	}

	save() {
		fs.writeFileSync("./database.json", JSON.stringify([...this.values()]));
	}
}

const commands = {
	getBalance: "üí≥ –ë–∞–ª–∞–Ω—Å",
	getMiners: "‚õè –ú–∞–π–Ω–µ—Ä—ã",
	aboutCookies: "üç™ –ó–∞—á–µ–º –Ω—É–∂–Ω—ã –∫—É–∫–∏?",
	setCookies: "üç™ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Cookie",
	deleteMe: "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –º–µ–Ω—è",
	setPassword: "üîë –û–±–Ω–æ–≤–∏—Ç—å –ø–∞—Ä–æ–ª—å",
	cancelCookies: "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫—É Cookie",
	cancelPassword: "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫—É –ø–∞—Ä–æ–ª—è",
	cancelDeleteMe: "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ",
	deletePassword: "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø–∞—Ä–æ–ª—å",
	confirmDeleteMe: "üóëÔ∏è –ë–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ —É–¥–∞–ª–∏—Ç—å –º–µ–Ω—è",
	back: "‚Ü©Ô∏è –ù–∞–∑–∞–¥",
};

const bot = new TelegramBot(process.env.BotToken, { polling: true });
const database = new Database();

const defaultSendOptions = (user) => {
	let buttons = [[
		{ text: commands.getBalance },
		{ text: commands.getMiners },
	], [{ text: commands.deleteMe }, { text: commands.setPassword }, { text: commands.aboutCookies }]];
	if (!user?.cookie) buttons = [[{ text: commands.setCookies }, { text: commands.aboutCookies }]];

	return {
		disable_web_page_preview: true,
		parse_mode: 'Markdown',
		reply_markup: {
			resize_keyboard: true,
			keyboard: buttons,
		},
	};
};

const temp = new Map();

function saveCookie(id, cookie) {
	if (temp.get(`Cookie${id}`)) clearTimeout(temp.get(`Cookie${id}`).timeout);
	return temp.set(`Cookie${id}`, { cookie, timeout: setTimeout(() => temp.delete(`Cookie${message.from.id}`), 30 * 60 * 1_000) });
}

function getCookie(id) {
	return temp.get(`Cookie${id}`).cookie;
}

bot.on('message', async (message) => {
	const user = database.get(message.from.id);

	if (temp.has(`setCookie${message.from.id}`)) {
		const { state, messageId } = temp.get(`setCookie${message.from.id}`);

		if (state === 1) {
			saveCookie(message.from.id, message.text);

			bot.deleteMessage(message.chat.id, message.message_id).catch(() => null);
			bot.deleteMessage(message.chat.id, messageId).catch(() => null);

			return bot.sendMessage(message.chat.id, "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–∞—Ä–æ–ª—å, —Å –ø–æ–º–æ—â—å—é –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É–¥—É—Ç –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω—ã –∫—É–∫–∏. (–õ—é–±–∞—è —Å—Ç—Ä–æ–∫–∞, —Å–æ–¥–µ—Ä–∂–∞—â–∞—è –ª—é–±—ã–µ —Å–∏–º–≤–æ–ª—ã. –ñ–µ–ª–∞—Ç–µ–ª—å–Ω–æ –æ—Ç 6 —Å–∏–º–≤–æ–ª–æ–≤). *–£ –í–∞—Å –µ—Å—Ç—å 30 –º–∏–Ω—É—Ç –Ω–∞ —ç—Ç–æ!*", {
				parse_mode: "Markdown",
				reply_markup: {
					inline_keyboard: [[{ text: commands.cancelCookies, callback_data: "cancelCookies" }]],
				},
			}).then((msg) => temp.set(`setCookie${message.from.id}`, { state: 2, messageId: msg.message_id }));
		}

		if (state === 2) {
			await bot.deleteMessage(message.chat.id, message.message_id).catch(() => null);
			bot.deleteMessage(message.chat.id, messageId).catch(() => null);

			if (!temp.has(`Cookie${message.from.id}`)) return bot.sendMessage(message.chat.id, "–í—Ä–µ–º—è –≤—ã—à–ª–æ! –û—Ç–ø—Ä–∞–≤—å—Ç–µ Cookie –µ—â—ë —Ä–∞–∑.", {
				reply_markup: { inline_keyboard: [[{ text: commands.cancelCookies, callback_data: "cancelCookies" }]] },
			});

			try {
				const key = crypto.createHash("sha256").update(`${process.env.Secret}Xaliks${message.text}`).digest();
				const iv = crypto.randomBytes(16);

				const cipher = crypto.createCipheriv("aes-256-ctr", key, iv);

				const result = Buffer.concat([cipher.update(Buffer.from(temp.get(`Cookie${message.from.id}`).cookie)), cipher.final()]).toString("hex");
				temp.delete(`setCookie${message.from.id}`);

				database.set(message.from.id, { cookie: result, iv: iv.toString("hex") });

				return bot.sendMessage(message.chat.id, `–û—Ç–ª–∏—á–Ω–æ! –Ø —Å–æ—Ö—Ä–∞–Ω–∏–ª —Ç–æ–ª—å–∫–æ \`${result}\` –∏ iv: \`${iv.toString("hex")}\`.`, defaultSendOptions(database.get(message.from.id)));
			} catch (error) {
				console.error(error);

				return bot.sendMessage(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ —Å–æ–æ–±—â–∏—Ç–µ –æ–± —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É –±–æ—Ç–∞ - @xaliksss.", {
					reply_markup: {
						inline_keyboard: [[{ text: commands.cancelCookies, callback_data: "cancelCookies" }]],
					},
				});
			}
		}
	}

	if (temp.has(`setPassword${message.from.id}`)) {
		await bot.deleteMessage(message.chat.id, message.message_id).catch(() => null);
		bot.deleteMessage(message.chat.id, temp.get(`setPassword${message.from.id}`)).catch(() => null);

		const decipher = crypto.createDecipheriv("aes-256-ctr", crypto.createHash("sha256").update(`${process.env.Secret}Xaliks${message.text}`).digest(), Buffer.from(user.iv, "hex"));
		const cookie = Buffer.concat([decipher.update(Buffer.from(user.cookie, "hex")), decipher.final()]).toString();

		saveCookie(message.from.id, cookie);
		temp.delete(`setPassword${message.from.id}`);

		return bot.sendMessage(message.chat.id, "–ü–∞—Ä–æ–ª—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω! –ß–µ—Ä–µ–∑ *30 –º–∏–Ω—É—Ç* –æ–Ω —Å–Ω–æ–≤–∞ —É–¥–∞–ª–∏—Ç—Å—è –∏–∑ –∫–µ—à–∞.", {
			...defaultSendOptions(user),
			reply_markup: {
				inline_keyboard: [[{ text: commands.deletePassword, callback_data: "deletePassword" }]],
			},
		});
	}

	if (message.text === "/start" || message.text === commands.back) {
		return bot.sendMessage(message.chat.id, `–ü—Ä–∏–≤–µ—Ç! üëã
–Ø ‚Äî *–ù–ï–û–§–ò–¶–ò–ê–õ–¨–ù–´–ô* –±–æ—Ç [kryptex.com](https://www.kryptex.com/?ref=0f31ff65). –Ø –ø–æ–º–æ–≥—É –í–∞–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –í–∞—à–∏ —Ä–∞–±–æ—Ç–∞—é—â–∏–µ –º–∞–π–Ω–µ—Ä—ã, –Ω–µ –∑–∞—Ö–æ–¥—è –Ω–∞ —Å–∞–π—Ç.

–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞, –í–∞–º –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–Ω–µ Cookie —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã https://www.kryptex.com/site/dashboard.
‚ö† –Ø —Ö—Ä–∞–Ω—é –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ *—Ç–æ–ª—å–∫–æ –≤ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–º –≤–∏–¥–µ*, –∏ –í—ã –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –º–æ–∂–µ—Ç–µ –∏—Ö —É–¥–∞–ª–∏—Ç—å.`, defaultSendOptions(user));
	}

	if (message.text === commands.aboutCookies) {
		return bot.sendMessage(message.chat.id, `üç™ Cookie ‚Äî –¥–∞–Ω–Ω—ã–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞ –ö—Ä–∏–ø—Ç–µ–∫—Å–µ. –ë–µ–∑ –Ω–∏—Ö –±–æ—Ç –Ω–µ —Å–º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å.
	
–ö—É–∫–∏ —à–∏—Ñ—Ä—É—é—Ç—Å—è –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º \`aes-256-ctr\`, –∫–ª—é—á –æ—Ç –Ω–µ–≥–æ –∑–Ω–∞–µ—Ç–µ *–¢–û–õ–¨–ö–û –í–´*.
–ö–æ–≥–¥–∞ –í—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ –∫–ª—é—á –±–æ—Ç—É, –±–æ—Ç —Ö—Ä–∞–Ω–∏—Ç –µ–≥–æ –≤ —Ç–µ—á–µ–Ω–∏–µ *30 –º–∏–Ω—É—Ç* —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞, –∞ –∑–∞—Ç–µ–º –æ–Ω —É–¥–∞–ª—è–µ—Ç—Å—è –∏–∑ –ø–∞–º—è—Ç–∏.
–ü–ª—é—Å —ç—Ç–æ–≥–æ –º–µ—Ç–æ–¥–∞ –≤ —Ç–æ–º, —á—Ç–æ –¥–∞–∂–µ –µ—Å–ª–∏ –∫–∞–∫–∏–º-—Ç–æ –æ–±—Ä–∞–∑–æ–º, –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–∞ —É—Ç–µ—á—ë—Ç –≤ —Å–µ—Ç—å, –Ω–∏–∫—Ç–æ –Ω–µ —Å–º–æ–∂–µ—Ç —É–∑–Ω–∞—Ç—å –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ.
–ì–ª–∞–≤–Ω–æ–µ - –Ω–µ –¥–µ–ª–∞—Ç—å —Å–ª–∏—à–∫–æ–º –ª—ë–≥–∫–∏–π –ø–∞—Ä–æ–ª—å‚ùó

*–ß—Ç–æ –±–æ—Ç —Ö—Ä–∞–Ω–∏—Ç –æ–±–æ –º–Ω–µ?*
\`${JSON.stringify(user || "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω")}\` ¬Ø\\\\_(„ÉÑ)\\_/¬Ø`,
			defaultSendOptions(user));
	}

	if (message.text === commands.deleteMe) {
		if (!user) return bot.sendMessage(message.chat.id, "–í—ã —É–∂–µ —É–¥–∞–ª–µ–Ω—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö!", defaultSendOptions(user));

		return bot.sendMessage(message.chat.id, "–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–µ–±—è –∏–∑ –±–æ—Ç–∞? –í–∞—à Cookie –±—É–¥–µ—Ç —É–¥–∞–ª—ë–Ω!", {
			reply_markup: {
				inline_keyboard: [[{ text: commands.confirmDeleteMe, callback_data: "confirmDeleteMe" }], [{ text: commands.cancelDeleteMe, callback_data: "cancelDeleteMe" }]]
			}
		});
	}

	if (message.text === commands.setCookies) {
		return bot.sendPhoto(
			message.chat.id,
			"https://i.xaliks.dev/47b4d0d38e655dd21a0c9769ce1b9774.png",
			{
				caption: `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ Cookie —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã https://www.kryptex.com/site/dashboard
\`Ctrl + Shift + I\` -> \`Network\` -> –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É (\`F5\`) -> –í –ø–æ—è–≤–∏–≤—à–∏—Ö—Å—è —Å—Å—ã–ª–∫–∞—Ö –≤—ã–±—Ä–∞—Ç—å –ø–µ—Ä–≤—É—é (\`www.kryptex.com\`) -> –°–ø—Ä–∞–≤–∞ –ø—Ä–æ–ª–∏—Å—Ç–∞—Ç—å –¥–æ "Request Headers" –∏ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å Cookie`,
				disable_web_page_preview: true,
				parse_mode: "Markdown",
				reply_markup: {
					inline_keyboard: [[{ text: commands.cancelCookies, callback_data: "cancelCookies" }]],
				},
			},
		).then((msg) => temp.set(`setCookie${message.from.id}`, { state: 1, messageId: msg.message_id }));
	}

	if (message.text === commands.setPassword) {
		return bot.sendMessage(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–∞—Ä–æ–ª—å, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —É–∫–∞–∑—ã–≤–∞–ª–∏, –∫–æ–≥–¥–∞ —à–∏—Ñ—Ä–æ–≤–∞–ª–∏ –∫—É–∫–∏.", {
			reply_markup: {
				inline_keyboard: [[{ text: commands.cancelPassword, callback_data: "cancelPassword" }], [{ text: commands.deletePassword, callback_data: "deletePassword" }]],
			},
		}).then((msg) => temp.set(`setPassword${message.from.id}`, msg.message_id));
	}

	// –î–∞–ª—å—à–µ –∏–¥—É—Ç –∫–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ç—Ä–µ–±—É—é—Ç –∫—É–∫–∏

	if (Object.values(commands).includes(message.text)) {
		if (!user?.cookie) return bot.sendMessage(message.chat.id, "–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ Cookie!", defaultSendOptions(user));

		const savedCookie = temp.get(`Cookie${message.from.id}`);
		if (!savedCookie) {
			return bot.sendMessage(message.chat.id, "*–í—Ä–µ–º—è –í—ã—à–ª–æ! –Ø –±–æ–ª—å—à–µ –Ω–µ –ø–æ–º–Ω—é –í–∞—à –ø–∞—Ä–æ–ª—å!*\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–æ–≤–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–∞—Ä–æ–ª—å, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —É–∫–∞–∑—ã–≤–∞–ª–∏, –∫–æ–≥–¥–∞ —à–∏—Ñ—Ä–æ–≤–∞–ª–∏ –∫—É–∫–∏.", {
				parse_mode: 'Markdown',
				reply_markup: {
					inline_keyboard: [[{ text: commands.cancelPassword, callback_data: "cancelPassword" }]],
				},
			}).then((msg) => temp.set(`setPassword${message.from.id}`, msg.message_id));
		};

		// refresh cookie timeout
		saveCookie(message.from.id, savedCookie.cookie);
	}

	if (temp.has(`selectMiner${message.from.id}`)) {
		const messageId = temp.get(`selectMiner${message.from.id}`);

		bot.deleteMessage(message.chat.id, messageId).catch(() => null);

		const msg = await bot.sendMessage(message.chat.id, "–ü–æ–ª—É—á–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é...");
		const miner = await fetchMiner(message.text.split(" - ").at(-1), message.from.id).catch(console.error);
		bot.deleteMessage(msg.chat.id, msg.message_id).catch(() => null);
		if (miner === 404) return bot.sendMessage(message.chat.id, "–ú–∞–π–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!");
		if (miner === 403) {
			return bot.sendMessage(
				message.chat.id,
				`*–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∞–π–Ω–µ—Ä–∞!* Cookie –∏—Å—Ç—ë–∫ –∏–ª–∏ –ø–∞—Ä–æ–ª—å –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π!
–ù–∞–∂–º–∏—Ç–µ –Ω–∞ "*${commands.deleteMe}*", —á—Ç–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥—Ä—É–≥–æ–π Cookie –∏–ª–∏ –Ω–∞ "*${commands.setPassword}*", —á—Ç–æ–±—ã —É–∫–∞–∑–∞—Ç—å –ø–∞—Ä–æ–ª—å.`,
				defaultSendOptions(user));
		}
		if (!miner) return bot.sendMessage(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∞–π–Ω–µ—Ä–∞!", defaultSendOptions(user));

		temp.delete(`selectMiner${message.from.id}`);

		const chartData = await fetchComputerHashrateChart(miner.id, message.from.id);
		const text = `${miner.online ? "üü¢" : "üî¥"} [${miner.name}](https://www.kryptex.com/site/hardware/${miner.id})
üî¢ *–ê–ª–≥–æ—Ä–∏—Ç–º—ã*: ${miner.algos.map((algo) => `\`${algo}\``).join(" / ")}
üå° *–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞*: ${miner.temperature}
üîå*–≠–Ω–µ—Ä–≥–æ–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ*: ${miner.power}
					
üñ• *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è*:
${miner.gpus.map((gpu) => `\`${gpu.name}\` | üå°${gpu.temperature} | ‚ö°${gpu.power} | ${gpu.fan}`).join("\n")}
					
üîó *–í–µ—Ä—Å–∏—è*: ${miner.version}
üíª *–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞*: ${miner.os}
üñ• *–û–ó–£*: ${miner.ram}
üñ• *–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä*: ${miner.cpu}`;

		if (!chartData) {
			return bot.sendMessage(message.chat.id, text, defaultSendOptions(user));
		}

		return bot.sendPhoto(
			message.chat.id,
			drawHashrateChart(chartData),
			{ ...defaultSendOptions(user), caption: text },
			{ filename: 'chart.png' },
		);
	}

	if (message.text === commands.getBalance) {
		const msg = await bot.sendMessage(message.chat.id, "–ü–æ–ª—É—á–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é...");

		const balanceData = await fetchBalance(message.from.id).catch(console.error);
		bot.deleteMessage(msg.chat.id, msg.message_id).catch(() => null);
		if (balanceData === 403) {
			return bot.sendMessage(
				message.chat.id,
				`*–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞!* Cookie –∏—Å—Ç—ë–∫ –∏–ª–∏ –ø–∞—Ä–æ–ª—å –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π!
–ù–∞–∂–º–∏—Ç–µ –Ω–∞ "*${commands.deleteMe}*", —á—Ç–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥—Ä—É–≥–æ–π Cookie –∏–ª–∏ –Ω–∞ "*${commands.setPassword}*", —á—Ç–æ–±—ã —É–∫–∞–∑–∞—Ç—å –ø–∞—Ä–æ–ª—å.`,
				defaultSendOptions(user));
		}
		if (!balanceData) return bot.sendMessage(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞!", defaultSendOptions(user));

		return bot.sendPhoto(
			message.chat.id,
			drawBtcChart(balanceData.btcChart),
			{
				caption: `üì¶ *–ë–∞–ª–∞–Ω—Å*: \`${balanceData.balance[0]}\` ${balanceData.balance[1]}
‚åö *–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è*: \`${balanceData.waitingForConfirm[0]}\` ${balanceData.waitingForConfirm[1]}
üí≥ *–î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –≤—ã–ø–ª–∞—Ç—ã*: \`${balanceData.availableWithdrawal[0]}\` ${balanceData.availableWithdrawal[1]}
üíµ *–î–æ—Ö–æ–¥ –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è*: \`${balanceData.allTimeEarnings[0]}\` ${balanceData.allTimeEarnings[1]}`,
				...defaultSendOptions(user),
			},
			{
				filename: 'chart.png',
			},
		);
	}

	if (message.text === commands.getMiners) {
		const msg = await bot.sendMessage(message.chat.id, "–ü–æ–ª—É—á–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é...");

		const miners = await fetchMiners(message.from.id).catch(console.error);
		bot.deleteMessage(msg.chat.id, msg.message_id).catch(() => null);
		if (miners === 403) {
			return bot.sendMessage(
				message.chat.id,
				`*–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∞–π–Ω–µ—Ä–æ–≤!* Cookie –∏—Å—Ç—ë–∫ –∏–ª–∏ –ø–∞—Ä–æ–ª—å –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π!
–ù–∞–∂–º–∏—Ç–µ –Ω–∞ "*${commands.deleteMe}*", —á—Ç–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥—Ä—É–≥–æ–π Cookie –∏–ª–∏ –Ω–∞ "*${commands.setPassword}*", —á—Ç–æ–±—ã —É–∫–∞–∑–∞—Ç—å –ø–∞—Ä–æ–ª—å.`,
				defaultSendOptions(user));
		}
		if (!miners) return bot.sendMessage(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∞–π–Ω–µ—Ä–æ–≤!", defaultSendOptions(user));

		const replyOptions = defaultSendOptions(user);
		if (miners.length) {
			replyOptions.reply_markup = {
				resize_keyboard: true,
				keyboard: chunkArray(miners.map((miner) => {
					return { text: `${miner.is_online ? "üü¢" : "üî¥"} ${miner.name} - ${miner.hashid}` };
				}), 2).concat([[{ text: commands.back }]]),
			}
		}

		return bot.sendMessage(message.chat.id, `*–í–∞—à–∏ –º–∞–π–Ω–µ—Ä—ã (${miners.length}):*

${miners.map((miner) => {
			return `${miner.is_online ? "üü¢" : "üî¥"} [${miner.name}](https://www.kryptex.com/site/hardware/${miner.hashid}) - \`${miner.hardware.gpu_name}\` / \`${miner.hardware.cpu_name}\``
		}).join("\n") || "–ü—É—Å—Ç–æ"}`, replyOptions).then((msg) => miners.length && temp.set(`selectMiner${message.from.id}`, msg.id));
	}
});

bot.on("callback_query", (query) => {
	if (query.data === "cancelCookies") {
		temp.delete(`setCookie${query.from.id}`);

		return bot.deleteMessage(query.message.chat.id, query.message.message_id).catch(() => null);
	}
	if (query.data === "cancelPassword" || query.data === "deletePassword") {
		temp.delete(`setPassword${query.from.id}`);

		if (query.data !== "cancelPassword") {
			const timeout = temp.get(`Cookie${query.from.id}`)?.timeout;
			if (timeout) {
				clearTimeout(timeout);
				temp.delete(`Cookie${query.from.id}`);
			}
		}

		return bot.deleteMessage(query.message.chat.id, query.message.message_id).catch(() => null);
	}
	if (query.data === "cancelDeleteMe") return bot.deleteMessage(query.message.chat.id, query.message.message_id).catch(() => null);
	if (query.data === "confirmDeleteMe") {
		database.delete(query.from.id);
		return bot.editMessageText("üóëÔ∏è –í—ã –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö!", { chat_id: query.message.chat.id, message_id: query.message.message_id });
	}
})

bot.on("polling_error", console.error);

console.log("Bot started!");

async function fetchBalance(userId) {
	const $ = await request("/site/balance", getCookie(userId));
	if (typeof $ === "number") return $;

	const approx = $(".badge").toArray().map((element) => $(element).text());
	const values = $(".h2").toArray().map((element) => $(element).text());
	const [balance, waitingForConfirm, availableWithdrawal, allTimeEarnings] = [[values[0], approx[0]], [values[1], approx[1]], [values[2], approx[2]], [values[5], approx[4]]];
	const btcChart = Object.entries($("script:not([class])").toArray().map((element) => {
		const match = $(element).html().match(/window\.btcChartData = '(.*?)'/)?.[1];

		if (match) return JSON.parse(match.replaceAll("\\u0022", "\""))[0].data;
	}).filter(Boolean)[0]).map(([timestamp, value]) => [new Date(Number(timestamp)), Math.round(value)]);

	return { balance, waitingForConfirm, availableWithdrawal, allTimeEarnings, btcChart };
}

async function fetchMiners(userId) {
	const $ = await request("/site/hardware", getCookie(userId));
	if (typeof $ === "number") return $;

	const computersRaw = $("#computerDataset").text();
	if (!computersRaw) throw new Error("Failed to fetch computers");

	try {
		return JSON.parse(computersRaw);
	} catch {
		return [];
	}
}

async function fetchMiner(id, userId) {
	const $ = await request(`/site/hardware/${id}`, getCookie(userId));
	if (typeof $ === "number") return $;

	const name = $("h2").first().text();
	const [algos, temperature, power] = $(".info-card__status").toArray().map((element) => $(element).find("br").replaceWith("\n").end().text());
	const gpus = $("table tbody").find("tr").toArray().map((element) => $(element).find('td, th').toArray().map((element) => $(element).text().trim())).map((gpu) => {
		return { id: gpu[0], name: gpu[1], temperature: gpu[2], power: gpu[3], fan: gpu[4] };
	});
	const [version, os, ram, cpu] = $(".row ul").first().find("li").toArray().map((element) => $(element).text().trim().split("\n")[1].trim());
	const status = $(".text-success").length;

	return {
		id,
		online: Boolean(status),
		name,
		algos: algos.split("\n"),
		temperature,
		power,
		gpus,
		version,
		os,
		ram,
		cpu
	}
}

async function fetchComputerCharts(id, userId) {
	const $ = await request(`/site/hardware/${id}/charts`, getCookie(userId));
	if (typeof $ === "number") return $;

	const chartsRaw = $("#chart_data").text();
	if (!chartsRaw) throw new Error("Failed to fetch computers");

	return JSON.parse(chartsRaw);
}

async function fetchComputerHashrateChart(id, userId) {
	const $ = await request(`/site/hardware/${id}/hashrate`, getCookie(userId));
	if (typeof $ === "number") return $;

	const chartsRaw = $("#chart_data").text();
	if (!chartsRaw) throw new Error("Failed to fetch computers");

	return JSON.parse(chartsRaw);
}

async function request(endpoint, Cookie) {
	try {
		const response = await fetch(`https://www.kryptex.com${endpoint}`, { headers: { Cookie } });
		if ([403, 404].includes(response.status)) return response.status;
		if (!response.ok) return null;

		return response.text().then(cheerio.load);
	} catch {
		return 403;
	}
}

const chartPlugins = [{
	id: 'backgroundColor',
	beforeDraw: (chart, args, options) => {
		const { ctx } = chart;
		ctx.save();
		ctx.globalCompositeOperation = 'destination-over';
		ctx.fillStyle = options.color || '#99ffff';
		ctx.fillRect(0, 0, chart.width, chart.height);
		ctx.restore();
	}
}, {
	id: "drawTitle",
	beforeDraw: (chart, args, options) => {
		const { ctx, titleBlock: { _padding: { height } } } = chart;

		ctx.save();
		if (logoImage.complete) {
			const logoHeight = 40;
			const padding = 7;
			const logoWidth = logoHeight * (logoImage.width / logoImage.height);
			ctx.drawImage(logoImage, padding, (height - logoHeight) / 2, logoWidth, logoHeight);

			ctx.font = options.leftFont || "bold 32px Montserrat";
			ctx.fillStyle = "white";
			const leftTextHeight = ctx.measureText(options.leftText).actualBoundingBoxAscent;
			ctx.fillText(options.leftText, logoWidth + padding * 2, (leftTextHeight + height) / 2);

			if (options.rightText) {
				ctx.textAlign = "right";
				ctx.font = options.rightFont || "bold 32px Montserrat";
				const rightTextHeight = ctx.measureText(options.rightText).actualBoundingBoxAscent;
				ctx.fillText(options.rightText, chart.width - padding, (rightTextHeight + height) / 2);
			}

			ctx.textAlign = "center";
			ctx.fillStyle = "rgba(255, 255, 255, 0.15)";
			ctx.font = "bold 40px Montserrat";
			const centerTextHeight = ctx.measureText("kryptex.com").actualBoundingBoxAscent;
			ctx.fillText("kryptex.com", chart.width / 2, (centerTextHeight + height) / 2);
		} else logoImage.onload = () => chart.draw();
		ctx.restore();
	}
}];

function drawBtcChart(data) {
	return new ChartJSNodeCanvas({ width: 1600, height: 700 }).renderToBufferSync({
		type: "line",
		data: {
			labels: data.map(([date]) => `${date.getDate()} ${["—è–Ω–≤", "—Ñ–µ–≤", "–º–∞—Ä", "–∞–ø—Ä", "–º–∞–π", "–∏—é–Ω", "–∏—é–ª", "–∞–≤–≥", "—Å–µ–Ω", "–æ–∫—Ç", "–Ω–æ—è", "–¥–µ–∫"][date.getMonth()]}`),
			datasets: [{
				data: data.map(([, value]) => value),
				tension: 0.3,
				borderColor: 'rgba(82, 107, 192, 1)',
				pointRadius: 0,
				fill: true,
				backgroundColor: ({ chart }) => {
					const { ctx, chartArea } = chart;
					if (!chartArea) return;

					const gradient = ctx.createLinearGradient(0, chartArea.top, 0, chartArea.bottom);
					gradient.addColorStop(0, 'rgba(82, 107, 192, 0.5)');
					gradient.addColorStop(1, "transparent");

					return gradient;
				}
			}]
		},
		options: {
			backgroundColor: "#060B1E",
			responsive: true,
			scales: {
				x: {
					ticks: {
						color: "white",
						autoSkip: true,
						maxTicksLimit: 12,
						font: { family: "Montserrat", size: 15 },
						maxRotation: 0,
					},
					grid: { display: false },
				},
				y: {
					ticks: { color: "white", font: { family: "Montserrat", size: 15 } },
					grid: { color: "#16213F" },
				},
			},
			plugins: {
				backgroundColor: { color: "#060B1E" },
				legend: { display: false },
				title: { display: true, padding: 35, text: "" },
				drawTitle: { leftText: "–ö—É—Ä—Å –ë–∏—Ç–∫–æ–∏–Ω–∞", leftFont: "bold 32px Montserrat", rightText: `–¶–µ–Ω–∞: ${data.at(-1)[1].toLocaleString()}`, rightFont: "bold 25px Montserrat" },
			},
		},
		plugins: chartPlugins,
	}, "image/png");
}

function drawHashrateChart(data) {
	const usedAlgos = [];
	const algos = Object.keys(data.algos);
	const colors = {
		...algos.reduce((obj, algo) => ({ ...obj, [algo]: `#${Math.floor(Math.random() * 16777215).toString(16)}` }), {}),
		rvn: "#f4b87c",
		erg: "#bc80bd",
		iron: "#ffed6f",
		cfx: "#db99e8",
		zeph: "#7e1aff",
		xna: "#4ba93b",
		clore: "#1928ff",
		pyi: "#e2ff66",
		alph: "#44d8d8",
	};

	for (const hashrate of data.hashrate) {
		usedAlgos.push(...Object.entries(hashrate).filter(([key, value]) => algos.includes(key) && value > 0 && !usedAlgos.includes(key)).map(([algo]) => algo));
	}
	const realData = [];

	let lastTimestamp = 0;
	for (const hashrate of data.hashrate) {
		const data = [{
			date: new Date(hashrate.timestamp),
			...usedAlgos.reduce((obj, algo) => ({ ...obj, [algo]: hashrate[algo] }), {})
		}];

		// –ó–∞–ø–æ–ª–Ω—è–µ–º –ø—É—Å—Ç—ã–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –≤ –≥—Ä–∞—Ñ–∏–∫–µ. –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–µ—Ä–µ–∑ –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç, –Ω–æ –∫–æ–≥–¥–∞ –æ–Ω –≤—ã–∫–ª—é—á–µ–Ω, –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç
		if (lastTimestamp) {
			const count = Math.floor((hashrate.timestamp - lastTimestamp) / dataUpdateInterval) - 1;
			if (count > 0) {
				new Array(count).fill(0).forEach((element, i) => data.unshift({
					date: new Date(lastTimestamp - i * dataUpdateInterval),
					...usedAlgos.reduce((obj, algo) => ({ ...obj, [algo]: 0 }), {})
				}))
			}
		}

		lastTimestamp = hashrate.timestamp;
		realData.push(...data);
	}

	return new ChartJSNodeCanvas({ width: 1600, height: 700 }).renderToBufferSync({
		type: "line",
		data: {
			labels: realData.map(({ date }) => `${date.getDate()} ${["—è–Ω–≤", "—Ñ–µ–≤", "–º–∞—Ä", "–∞–ø—Ä", "–º–∞–π", "–∏—é–Ω", "–∏—é–ª", "–∞–≤–≥", "—Å–µ–Ω", "–æ–∫—Ç", "–Ω–æ—è", "–¥–µ–∫"][date.getMonth()]}`),
			datasets: usedAlgos.map((algo) => {
				return {
					label: `${data.algos[algo]} (${data.units[algo]})`,
					yAxisID: data.units[algo],
					data: realData.map((data) => data[algo]),
					tension: 0.35,
					backgroundColor: colors[algo] || Math.floor(Math.random() * 16777215).toString(16),
					borderColor: colors[algo] || Math.floor(Math.random() * 16777215).toString(16),
					pointRadius: 0,
				};
			}),
		},
		options: {
			backgroundColor: "#060B1E",
			responsive: true,
			scales: {
				x: {
					ticks: {
						color: "white",
						autoSkip: true,
						maxTicksLimit: 13,
						font: { family: "Montserrat", size: 15 },
						maxRotation: 0,
					},
					grid: { display: false },
				},
				["MH/s"]: {
					title: {
						display: true,
						color: "white",
						text: "MH/s",
						font: { family: "Montserrat", size: 15 },
					},
					position: "left",
					ticks: { color: "white", font: { family: "Montserrat", size: 15 } },
					grid: { color: "#16213F" },
				},
				["H/s"]: {
					title: {
						display: true,
						color: "white",
						text: "H/s",
						font: { family: "Montserrat", size: 15 },
					},
					position: "right",
					ticks: { color: "white", font: { family: "Montserrat", size: 15 } },
					grid: { color: "#16213F" },
				},
			},
			plugins: {
				backgroundColor: { color: "#060B1E" },
				legend: {
					position: "bottom",
					labels: {
						usePointStyle: true,
						color: "white",
						font: { family: "Montserrat", size: 15 }
					}
				},
				title: { display: true, padding: 35, text: "" },
				drawTitle: { leftText: "–•—ç—à—Ä–µ–π—Ç", leftFont: "bold 32px Montserrat" },
			},
		},
		plugins: chartPlugins,
	}, "image/png");
}

function chunkArray(array, chunkSize) {
	const arr = [];
	for (let i = 0; i < array.length; i += chunkSize) arr.push(array.slice(i, i + chunkSize));
	return arr;
}

process.on("unhandledRejection", console.error);
